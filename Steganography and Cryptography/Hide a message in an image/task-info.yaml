type: edu
files:
- name: src/cryptography/Main.kt
  visible: true
  text: |+
    package cryptography

    import java.awt.image.BufferedImage
    import java.io.File
    import java.io.IOException
    import java.lang.Exception
    import javax.imageio.ImageIO
    import kotlin.math.pow

    class IOExceptionReadFile(message:String): IOException(message)
    class IOExceptionWriteFile(message:String): IOException(message)

    class CryptoApp() {
        private var inputFile = File("")
        private var outputFile = File("")
        private var inputImage = BufferedImage(1,1,BufferedImage.TYPE_INT_RGB)
        private var outputImage = BufferedImage(1,1,BufferedImage.TYPE_INT_RGB)

        fun mainOperation() {
            while (true) {
                println("Task (hide, show, exit):")
                when(val action = readln()) {
                    "hide" -> hide()
                    "show" -> println("Obtaining message from image.")
                    "exit" -> {
                        println("Bye!")
                        break
                    }
                    else -> println("Wrong task: $action")
                }
            }
        }

        private fun setLSBtoOne(image: BufferedImage): BufferedImage {

            for (i in 0 until image.width) {
                for (j in 0 until image.height) {
                    val rgb = image.getRGB(i, j)

                    image.setRGB(i, j, 0x010101 or rgb)
                }
            }
            return image
        }



        fun hide() {
            try {
                println("Input image file: ")
                try {
                    inputFile = File(readln())
                    inputImage = ImageIO.read(inputFile)
                } catch (e: Exception) {
                    throw IOExceptionReadFile("Can't read input file!")
                }
                println("Output image file: ")
                try {
                    outputFile = File(readln())
                    outputImage = ImageIO.read(outputFile)
                } catch (e: Exception) {
                    throw IOExceptionWriteFile("Can't read output file!")
                }
            } catch (e: IOExceptionReadFile) {
                println(e.message)
                return
            } catch (e: IOExceptionWriteFile) {
                println(e.message)
                return
            }

            println("Input Image: ${inputFile.invariantSeparatorsPath}")
            println("Output Image: ${outputFile.invariantSeparatorsPath}")

            inputImage = setLSBtoOne(inputImage)
            println("Image ${outputFile.invariantSeparatorsPath} is saved.")
            val extension = outputFile.name.split(".").last()
            ImageIO.write(inputImage, extension, outputFile)


        }
    }

    fun main() {
        val app = CryptoApp()
        app.mainOperation()
    }

  learner_created: false
- name: test/small.png
  visible: false
  learner_created: false
- name: test/SteganographyTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.awt.Color
    import java.awt.image.BufferedImage
    import java.io.File
    import java.security.MessageDigest
    import javax.imageio.ImageIO

    class SteganographyTest: StageTest<Any>() {
        @DynamicTest
        fun imageCreateTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().toLowerCase().trim()
            if (!outputString.contains("task (hide, show, exit):")) {
                return CheckResult(false, "Prompt \"Task (hide, show, exit):\" is missing.")
            }

            outputString = main.execute("hide").toLowerCase().trim()
            if (!outputString.contains("input image file:")) {
                return CheckResult(false, "Wrong output after the \"hide\" command.")
            }

            try {
                val infile = "test/testimage.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "Input test image file doesn't exist. Try reloading the project.")
                }
                val inputImage: BufferedImage = ImageIO.read(inputFile)
                if (imageHash(inputImage) != "cc5bc38fad61e51b44ec7731f49ae2e290c06f55") {
                    return CheckResult(false, "Input test image file is corrupted. Try reloading the project.")
                }

                outputString = main.execute(infile).toLowerCase().trim()
                if (!outputString.contains("output image file:")) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }

                val outfile = "test/out.png"
                outputString = main.execute(outfile).toLowerCase().trim()
                if (!outputString.contains("message to hide:")) {
                    return CheckResult(false, "Wrong output after inserting the output filename.")
                }

                val message = "Hyperskill steganography program."
                outputString = main.execute(message).toLowerCase().trim()
                if (!( outputString.contains("message saved") && outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "Wrong output after inserting the message.")
                }

                val outputFile = File(outfile)
                if (!outputFile.exists()) {
                    return CheckResult(false, "Image file $outfile hasn't been created.")
                }
                val outputImage: BufferedImage = ImageIO.read(outputFile)
                if (imageHash(outputImage) != "c1efea2b60e889c86d38110d68589ac16610a4b1") {
                    return CheckResult(false, "Wrong output file. Wrong output image hash.")
                }

                outputString = main.execute("show").toLowerCase().trim()
                if (!outputString.contains("input image file:")) {
                    return CheckResult(false, "Wrong output after the \"hide\" command.")
                }

                outputString = main.execute(outfile).toLowerCase().trim()
                if (!( outputString.contains("message:") && outputString.contains(message.toLowerCase()) &&
                            outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }
            } catch (e: Exception) {
                return CheckResult(false, e.message)
            }

            outputString = main.execute("exit").toLowerCase().trim()
            if (!outputString.contains("bye!")) {
                return CheckResult(false, "Wrong output after the \"exit\" command.")
            }

            if (!main.isFinished) {
                return CheckResult(false, "Program has not terminated after the \"exit\" command.")
            }

            return CheckResult(true, "")
        }

        @DynamicTest
        fun smallImageTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().toLowerCase().trim()
            if (!outputString.contains("task (hide, show, exit):")) {
                return CheckResult(false, "Prompt \"Task (hide, show, exit):\" is missing.")
            }

            outputString = main.execute("hide").toLowerCase().trim()
            if (!outputString.contains("input image file:")) {
                return CheckResult(false, "Wrong output after the \"hide\" command.")
            }

            try {
                val infile = "test/small.png"
                val inputFile = File(infile)
                if (!inputFile.exists()) {
                    return CheckResult(false, "Input test image file doesn't exist. Try reloading the project.")
                }
                val inputImage: BufferedImage = ImageIO.read(inputFile)
                if (imageHash(inputImage) != "c4679ca63e03c377de73ab3aaede91f37a0d50b6") {
                    return CheckResult(false, "Input test image file is corrupted. Try reloading the project.")
                }

                outputString = main.execute(infile).toLowerCase().trim()
                if (!outputString.contains("output image file:")) {
                    return CheckResult(false, "Wrong output after inserting the input filename.")
                }

                val outfile = "test/out2.png"
                outputString = main.execute(outfile).toLowerCase().trim()
                if (!outputString.contains("message to hide:")) {
                    return CheckResult(false, "Wrong output after inserting the output filename.")
                }

                val message = "Hyperskill steganography program."
                outputString = main.execute(message).toLowerCase().trim()
                if ( !( outputString.contains("the input image is not large enough to hold this message") && outputString.contains("task (hide, show, exit):") ) ) {
                    return CheckResult(false, "The program should check that the image size is adequate for holding the Bytes array.")
                }

            } catch (e: Exception) {
                return CheckResult(false, e.message)
            }

            outputString = main.execute("exit").toLowerCase().trim()
            if (!outputString.contains("bye!")) {
                return CheckResult(false, "Wrong output after the \"exit\" command.")
            }

            if (!main.isFinished) {
                return CheckResult(false, "Program has not terminated after the \"exit\" command.")
            }

            return CheckResult(true, "")
        }

        private fun imageHash(inputImage: BufferedImage) : String {
            val imageByteArray = ByteArray(3 * inputImage.width * inputImage.height)
            var index = 0
            for (y in 0 until inputImage.height) {
                for (x in 0 until inputImage.width) {
                    val color = Color(inputImage.getRGB(x, y))
                    imageByteArray[index] = color.red.toByte()
                    index++
                    imageByteArray[index] = color.green.toByte()
                    index++
                    imageByteArray[index] = color.blue.toByte()
                    index++
                }
            }
            val md = MessageDigest.getInstance("SHA-1")
            md.update(imageByteArray)
            return md.digest().joinToString("") { "%02x".format(it) }
        }

    }

  learner_created: false
- name: test/testimage.png
  visible: false
  learner_created: false
- name: test/out.png
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/160/stages/832/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 13 Feb 2023 23:00:06 UTC"
record: 2
